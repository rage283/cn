program 1

import java.io.*;
class Crc
{
public static void main(String args[]) throws IOException
{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
int[ ] data;
int[ ] div;
int[ ] divisor;
int[ ] rem;
int[ ] crc;
int data_bits, divisor_bits, tot_length;
System.out.println("Enter number of data bits : ");
data_bits=Integer.parseInt(br.readLine());
data=new int[data_bits];
System.out.println("Enter data bits : ");
for(int i=0; i<data_bits; i++)
data[i]=Integer.parseInt(br.readLine());
System.out.println("Enter number of bits in divisor : ");
divisor_bits=Integer.parseInt(br.readLine());
divisor=new int[divisor_bits];
System.out.println("Enter Divisor bits : ");
for(int i=0; i<divisor_bits; i++)
divisor[i]=Integer.parseInt(br.readLine());
tot_length=data_bits+divisor_bits-1;
div=new int[tot_length];
rem=new int[tot_length];
crc=new int[tot_length];
/* CRC GENERATION */
for(int i=0;i<data.length;i++)
div[i]=data[i];
System.out.print("Dividend (after appending 0's) are : ");
for(int i=0; i< div.length; i++)
System.out.print(div[i]);
System.out.println();
for(int j=0; j<div.length; j++)
{
rem[j] = div[j];
}
rem=divide(div, divisor, rem);
for(int i=0;i<div.length;i++) //append dividend and ramainder
{
crc[i]=(div[i]^rem[i]);
}
System.out.println();
System.out.println("CRC code : ");
for(int i=0;i<crc.length;i++)
System.out.print(crc[i]);
/* ERROR DETECTION */
System.out.println();
System.out.println("Enter CRC code of "+tot_length+" bits : ");
for(int i=0; i<crc.length; i++)
crc[i]=Integer.parseInt(br.readLine());
for(int j=0; j<crc.length; j++)
{
rem[j] = crc[j];
}
rem=divide(crc, divisor, rem);
for(int i=0; i< rem.length; i++)
{
if(rem[i]!=0)
{
System.out.println("Error");
break;
}
if(i==rem.length-1) 
System.out.println("No Error");
}
System.out.println("THANK YOU. .... )");
}
static int[] divide(int div[],int divisor[], int rem[])
{
int cur=0;
while(true)
{
for(int i=0;i<divisor.length;i++)
rem[cur+i]=(rem[cur+i]^divisor[i]);
while(rem[cur]==0 && cur!=rem.length-1)
cur++;
if((rem.length-cur)<divisor.length)
break;
}
return rem;
}
}
 
program 2
import java.io.*;
import java.net.*;

public class Sender {
	public static void main(String[] args) throws Exception {
		DatagramSocket socket = new DatagramSocket();
		InetAddress receiverAddress = InetAddress.getByName("localhost");
		int receiverPort = 9876;
		int windowSize = 4;
		byte[] data = "Hello, SlidingWindow".getBytes();
		int base = 0;

		while (base < data.length) {
			for (int i = base; i < base + windowSize && i < data.length; i++) {
				DatagramPacket packet = new DatagramPacket(data, i, 1, receiverAddress, receiverPort);
				System.out.println("Sending packet with index: " + i);
				socket.send(packet);
			}

			DatagramPacket ackPacket = new DatagramPacket(new byte[1], 1);
			System.out.println("Waiting for Ack");
			socket.receive(ackPacket);
			int ack = ackPacket.getData()[0];

			base = ack;
			//if (ack >= base) {
			//	base = ack + 1;
			//}
			
			System.out.println("Received ack:" + ack + " base:" + base + " data length:" + data.length);

		}

		socket.close();
	}
}

import java.io.*;
import java.net.*;

public class Receiver {
	public static void main(String[] args) throws Exception {
		DatagramSocket socket = new DatagramSocket(9876);
		int expectedSeqNum = 0;
		int windowSize = 4;
		while (true) {
			DatagramPacket packet = new DatagramPacket(new byte[1], 1);
			System.out.println("Waiting for packet");
			socket.receive(packet);
			int data = packet.getData()[0];
			expectedSeqNum++;
			System.out.println("Received data:" + (char)data + "  ExpectedSeqNum:" +  expectedSeqNum);

			if (expectedSeqNum%windowSize == 0) {
				System.out.println("Sending expectedSeqNum : " + expectedSeqNum);
				DatagramPacket ackPacket = new DatagramPacket(new byte[] { (byte) expectedSeqNum }, 1, packet.getAddress(), packet.getPort());
				socket.send(ackPacket);
			}
		}
	}
}

program 3

import java.util.Scanner;
public class BellmanFord
{
private int D[];
private int n;
public static final int MAX_VALUE = 999;
public BellmanFord(int n)
{
this.n=n;
D = new int[n+1];
}
public void shortest(int s,int A[][])
{
for (int i=1;i<=n;i++)
D[i]=MAX_VALUE;
D[s] = 0;
for(int k=1;k<=n-1;k++)
for(int i=1;i<=n;i++)
for(int j=1;j<=n;j++)
if(A[i][j]!=MAX_VALUE)
{
if(D[j]>D[i]+A[i][j])
D[j]=D[i]+A[i][j];
}
for(int i=1;i<=n;i++)
System.out.println("Distance of source " + s + " to "+ i + " is " + D[i]);
}
public static void main(String[ ] args)
{
int n=0,s;
Scanner sc = new Scanner(System.in);
System.out.println("Enter the number of vertices");
n = sc.nextInt();
int A[][] = new int[n+1][n+1];
System.out.println("Enter the Weighted matrix");
for(int i=1;i<=n;i++)
for(int j=1;j<=n;j++)
{
A[i][j]=sc.nextInt();
if(i==j)
{
A[i][j]=0;
continue;
}
if(A[i][j]==0)
A[i][j]=MAX_VALUE;
}
System.out.println("Enter the source vertex");
s=sc.nextInt();
BellmanFord b = new BellmanFord(n);
b.shortest(s,A);
sc.close();
}
}
program 4 

Client Program
import java.net.*;
import java.io.*;
public class Lclient
{
public static void main( String args[ ] ) throws Exception
{
Socket sock = new Socket( "127.0.0.1", 4000);
// reading the file name from keyboard. Uses input stream
System.out.print("Enter the file name");
BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in));
String fname = keyRead.readLine(); //sending the file name to server. Uses PrintWriter
try
{
OutputStream ostream = sock.getOutputStream( );
PrintWriter pwrite = new PrintWriter(ostream, true);
pwrite.println(fname); //receiving the contentsfrom server. Uses input stream
InputStream istream = sock.getInputStream();
BufferedReader socketRead = new BufferedReader(new InputStreamReader(istream));
String str;
while((str = socketRead.readLine()) != null) // reading line-by-line
{System.out.println(str);
}
pwrite.close();
socketRead.close();
keyRead.close();
}
catch(Exception e)
{
System.out.println("An error occured while opening the file");
}
}
}
Server Program
import java.net.*;
import java.io.*;
public class Lserver
{
public static void main(String args[]) throws Exception
{ // establishing the connection with the server
try
{
ServerSocket sersock = new ServerSocket(4000);
System.out.println("Server ready for connection"); 
Socket sock = sersock.accept(); // binding with port: 4000
System.out.println("Connection is successful and wating for chatting");
// reading the file name from client
InputStream istream = sock.getInputStream( );
BufferedReader fileRead =new BufferedReader(new InputStreamReader(istream));
String fname = fileRead.readLine( ); //reading file contents
BufferedReader contentRead = new BufferedReader(new FileReader(fname) );
// keeping output stream ready to send the contents
OutputStream ostream = sock.getOutputStream( );
PrintWriter pwrite = new PrintWriter(ostream, true);
String str;
while((str = contentRead.readLine()) != null) //reading line-by-line from file
{
pwrite.println(str); // sending each line to client
}
sock.close();
sersock.close(); // closing network sockets
pwrite.close();
fileRead.close();
contentRead.close();
}
catch(Exception e)
{
System.out.println("An error occured while opening the file");
}
}
}


program5

Client program
import java.net.*;
public class UDPC
{
public static void main(String[] args)
{
DatagramSocketskt;
try
{
skt=new DatagramSocket();
String msg= "text message ";
byte[] b = msg.getBytes();
InetAddress host=InetAddress.getByName("127.0.0.1");
int serverSocket=6788;
DatagramPacket request =new
DatagramPacket(b,b.length,host,serverSocket);
skt.send(request);
byte[] buffer =new byte[1000];
DatagramPacket reply= new
DatagramPacket(buffer,buffer.length);
skt.receive(reply);
System.out.println("client received:" +new String(reply.getData()));
skt.close();
}
catch(Exception ex)
{}
}
}
Server program
import java.util.Scanner;
import java.net.*;
public class UDPS
{
public static void main(String[] args)
{
DatagramSocket skt=null;
String ch;
Scanner input=new Scanner(System.in);
try
{
skt=new DatagramSocket(6788);
byte[] buffer = new byte[1000];
while(true)
{
DatagramPacket request = new DatagramPacket(buffer,buffer.length);
skt.receive(request);
System.out.print("enter the data");
ch=input.nextLine();
byte[] sendMsg= (ch+ " server processed").getBytes();
DatagramPacket reply = new
DatagramPacket(sendMsg,sendMsg.length,request.getAddress
(),request.getPort());
skt.send(reply);
}
}
catch(Exception ex) {}
}
}

program 6
import java.util.*;
import java.io.*;
public class Rsa
{
static int gcd(int m,int n)
{
while(n!=0)
{
}
return m;
}
intr=m%n;
m=n;
n=r;
public static void main(String args[])
{
int p=0,q=0,n=0,e=0,d=0,phi=0;
int nummes[]=new int[100];
int encrypted[]=new int[100];
int decrypted[]=new int[100];
int i=0,j=0,nofelem=0;
Scanner sc=new Scanner(System.in);
String message ;
System.out.println("Enter the Message tobe encrypted:");
message= sc.nextLine();
System.out.println("Enter value of p and q\n");
p=sc.nextInt();
q=sc.nextInt();
n=p*q;
phi=(p-1)*(q-1);
for(i=2;i<phi;i++)
if(gcd(i,phi)==1) break;
e=i;
for(i=2;i<phi;i++)
if((e*i)%phi==1)
break;
d=i;
for(i=0;i<message.length();i++)
{
char c = message.charAt(i);
int a =(int)c;
nummes[i]=c-96;
}
nofelem=message.length();
for(i=0;i<nofelem;i++)
{
encrypted[i]=1;
for(j=0;j<e;j++)
encrypted[i] =(encrypted[i]*nummes[i])%n;
}
System.out.println("\n Encrypted message\n");
for(i=0;i<nofelem;i++)
{
System.out.print(encrypted[i]);
System.out.print((char)(encrypted[i]+96));
}
for(i=0;i<nofelem;i++)
{
decrypted[i]=1;
for(j=0;j<d;j++)
decrypted[i]=(decrypted[i]*encrypted[i])%n;
}
System.out.println("\n Decrypted message\n ");
for(i=0;i<nofelem;i++)
System.out.print((char)(decrypted[i]+96));
return;
}
}

program 7

import java.util.*;
public class Leaky
{
static int min(int x,int y)
{
if(x<y)
return x;
else
return y;
}
public static void main(String[] args)
{
int drop=0,psent,nsec,cap,pleft=0,i,process;
int inp[]=new int[25];
Scanner sc=new Scanner(System.in);
System.out.println("Enter The Bucket Size\n");
cap= sc.nextInt();
System.out.println("Enter The Operation Rate\n");
process= sc.nextInt();
System.out.println("Enter The No. Of Seconds You Want To Stimulate\n");
nsec=sc.nextInt();
for(i=0;i<nsec;i++)
{
System.out.print("Enter The Size Of The Packet Entering At "+ i+1 + " sec");
inp[i] = sc.nextInt();
}
System.out.println("\nSecond | Packet Recieved | Packet Sent | Packet Left | Packet
Dropped|\n");
System.out.println(" \n");
for(i=0;i<nsec;i++)
{
pleft+=inp[i];
if(pleft>cap)
{
drop=pleft-cap;
pleft=cap;
}
System.out.print(i+1);
System.out.print("\t\t"+inp[i]);
psent=min(pleft,process);
System.out.print("\t\t"+psent);
pleft=pleft-psent;
System.out.print("\t\t"+pleft);
System.out.print("\t\t"+drop);
drop=0;
System.out.println();
}
for(;pleft!=0;i++)
{
if(pleft>cap)
{
drop=pleft-cap;
pleft=cap;
}
}
}
}
System.out.print(i+1);
System.out.print("\t\t0");
psent=min(pleft,process);
System.out.print("\t\t"+psent);
pleft=pleft-psent;
System.out.print("\t\t"+pleft);
System.out.print("\t\t"+drop);
System.out.println();
